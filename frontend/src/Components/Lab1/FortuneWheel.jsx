import React, { useState, useEffect } from "react";

const FortuneWheel = () => {
  const [games, setGames] = useState([]);
  const [newGameName, setNewGameName] = useState("");
  const [newDonationAmount, setNewDonationAmount] = useState("");
  const [selectedGame, setSelectedGame] = useState(null);
  const [spinHistory, setSpinHistory] = useState([]);
  const [totalDonations, setTotalDonations] = useState(0);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è
  const addDonation = () => {
    if (
      !newGameName.trim() ||
      !newDonationAmount ||
      parseFloat(newDonationAmount) <= 0
    ) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏ —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –±–æ–ª—å—à–µ 0");
      return;
    }

    const amount = parseFloat(newDonationAmount);
    const gameName = newGameName.trim();

    setGames((prevGames) => {
      const existingGameIndex = prevGames.findIndex(
        (game) => game.name.toLowerCase() === gameName.toLowerCase()
      );

      if (existingGameIndex !== -1) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–≥—Ä—É
        const updatedGames = [...prevGames];
        updatedGames[existingGameIndex] = {
          ...updatedGames[existingGameIndex],
          amount: updatedGames[existingGameIndex].amount + amount,
        };
        return updatedGames;
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        return [...prevGames, { name: gameName, amount }];
      }
    });

    setNewGameName("");
    setNewDonationAmount("");
  };

  // –í—Ä–∞—â–µ–Ω–∏–µ –∫–æ–ª–µ—Å–∞
  const spinWheel = () => {
    if (games.length === 0) {
      alert("–ù–µ—Ç –∏–≥—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞! –î–æ–±–∞–≤—å—Ç–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞.");
      return;
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
    const total = games.reduce((sum, game) => sum + game.amount, 0);
    setTotalDonations(total);

    // –°–æ–∑–¥–∞–µ–º –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    const cumulativeProbabilities = [];
    let cumulative = 0;

    games.forEach((game) => {
      cumulative += game.amount / total;
      cumulativeProbabilities.push({
        name: game.name,
        cumulative,
        probability: game.amount / total,
      });
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
    const random = Math.random();

    // –ù–∞—Ö–æ–¥–∏–º –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∏–≥—Ä—É
    let winningGame = null;
    for (let i = 0; i < cumulativeProbabilities.length; i++) {
      if (random <= cumulativeProbabilities[i].cumulative) {
        winningGame = cumulativeProbabilities[i];
        break;
      }
    }

    setSelectedGame(winningGame);
    setSpinHistory((prev) => [
      {
        game: winningGame.name,
        timestamp: new Date(),
        probability: winningGame.probability,
      },
      ...prev.slice(0, 9), // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤—Ä–∞—â–µ–Ω–∏–π
    ]);
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–≥—Ä
  useEffect(() => {
    const total = games.reduce((sum, game) => sum + game.amount, 0);
    setTotalDonations(total);
  }, [games]);

  return (
    <div
      style={{
        padding: "20px",
        fontFamily: "Arial, sans-serif",
        maxWidth: "800px",
        margin: "0 auto",
      }}
    >
      <h1>üé° –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞</h1>

      {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è */}
      <div
        style={{
          marginBottom: "30px",
          padding: "20px",
          border: "2px solid #4CAF50",
          borderRadius: "10px",
          backgroundColor: "#f9f9f9",
        }}
      >
        <h2>üí∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ</h2>
        <div
          style={{
            display: "flex",
            gap: "10px",
            flexWrap: "wrap",
            alignItems: "center",
          }}
        >
          <input
            type="text"
            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã"
            value={newGameName}
            onChange={(e) => setNewGameName(e.target.value)}
            style={{
              padding: "10px",
              border: "1px solid #ccc",
              borderRadius: "5px",
              flex: "1",
            }}
          />
          <input
            type="number"
            placeholder="–°—É–º–º–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è"
            value={newDonationAmount}
            onChange={(e) => setNewDonationAmount(e.target.value)}
            min="1"
            step="1"
            style={{
              padding: "10px",
              border: "1px solid #ccc",
              borderRadius: "5px",
              width: "150px",
            }}
          />
          <button
            onClick={addDonation}
            style={{
              padding: "10px 20px",
              backgroundColor: "#4CAF50",
              color: "white",
              border: "none",
              borderRadius: "5px",
              cursor: "pointer",
            }}
          >
            –î–æ–±–∞–≤–∏—Ç—å
          </button>
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ */}
      <div
        style={{
          marginBottom: "30px",
          padding: "20px",
          border: "2px solid #2196F3",
          borderRadius: "10px",
          backgroundColor: "#e3f2fd",
        }}
      >
        <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
        <p>
          <strong>–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π:</strong>{" "}
          {totalDonations.toFixed(2)} —Ä—É–±.
        </p>
        <p>
          <strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –≤ —Å–ø–∏—Å–∫–µ:</strong> {games.length}
        </p>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞ */}
      <div style={{ marginBottom: "30px", textAlign: "center" }}>
        <button
          onClick={spinWheel}
          disabled={games.length === 0}
          style={{
            padding: "15px 30px",
            fontSize: "18px",
            backgroundColor: games.length === 0 ? "#ccc" : "#FF5722",
            color: "white",
            border: "none",
            borderRadius: "25px",
            cursor: games.length === 0 ? "not-allowed" : "pointer",
            fontWeight: "bold",
          }}
        >
          üéØ –í—Ä–∞—â–∞—Ç—å –∫–æ–ª–µ—Å–æ!
        </button>
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ä–∞—â–µ–Ω–∏—è */}
      {selectedGame && (
        <div
          style={{
            marginBottom: "30px",
            padding: "30px",
            border: "3px solid #FF9800",
            borderRadius: "15px",
            backgroundColor: "#fff3e0",
            textAlign: "center",
          }}
        >
          <h2>üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å!</h2>
          <div
            style={{
              fontSize: "24px",
              fontWeight: "bold",
              color: "#E91E63",
              margin: "15px 0",
            }}
          >
            {selectedGame.name}
          </div>
          <p>
            –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è: {(selectedGame.probability * 100).toFixed(2)}
            %
          </p>
          <p>
            –°—É–º–º–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π –∑–∞ —ç—Ç—É –∏–≥—Ä—É:{" "}
            {games
              .find(
                (g) => g.name.toLowerCase() === selectedGame.name.toLowerCase()
              )
              ?.amount.toFixed(2)}{" "}
            —Ä—É–±.
          </p>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ –∏–≥—Ä —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏ */}
      <div
        style={{
          marginBottom: "30px",
          padding: "20px",
          border: "2px solid #9C27B0",
          borderRadius: "10px",
          backgroundColor: "#f3e5f5",
        }}
      >
        <h2>üéÆ –°–ø–∏—Å–æ–∫ –∏–≥—Ä –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏</h2>
        {games.length === 0 ? (
          <p>–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ!</p>
        ) : (
          <div style={{ maxHeight: "300px", overflowY: "auto" }}>
            {games
              .sort((a, b) => b.amount - a.amount)
              .map((game, index) => (
                <div
                  key={index}
                  style={{
                    padding: "10px",
                    margin: "5px 0",
                    backgroundColor: "white",
                    borderRadius: "5px",
                    border: "1px solid #ddd",
                    display: "flex",
                    justifyContent: "space-between",
                    alignItems: "center",
                  }}
                >
                  <span>{game.name}</span>
                  <div style={{ textAlign: "right" }}>
                    <div>{game.amount.toFixed(2)} —Ä—É–±.</div>
                    <div style={{ fontSize: "12px", color: "#666" }}>
                      {((game.amount / totalDonations) * 100).toFixed(2)}%
                    </div>
                  </div>
                </div>
              ))}
          </div>
        )}
      </div>

      {/* –ò—Å—Ç–æ—Ä–∏—è –≤—Ä–∞—â–µ–Ω–∏–π */}
      {spinHistory.length > 0 && (
        <div
          style={{
            padding: "20px",
            border: "2px solid #607D8B",
            borderRadius: "10px",
            backgroundColor: "#eceff1",
          }}
        >
          <h2>üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—Ä–∞—â–µ–Ω–∏–π</h2>
          <div style={{ maxHeight: "200px", overflowY: "auto" }}>
            {spinHistory.map((spin, index) => (
              <div
                key={index}
                style={{
                  padding: "8px",
                  margin: "5px 0",
                  backgroundColor: "white",
                  borderRadius: "5px",
                  border: "1px solid #ddd",
                  display: "flex",
                  justifyContent: "space-between",
                }}
              >
                <span>{spin.game}</span>
                <div style={{ textAlign: "right", fontSize: "12px" }}>
                  <div>{(spin.probability * 100).toFixed(2)}%</div>
                  <div style={{ color: "#666" }}>
                    {spin.timestamp.toLocaleTimeString()}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ */}
      <div
        style={{
          marginTop: "30px",
          padding: "20px",
          border: "2px solid #795548",
          borderRadius: "10px",
          backgroundColor: "#efebe9",
        }}
      >
        <h2>üìö –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ</h2>
        <p>
          <strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å:</strong>
        </p>
        <ul>
          <li>
            –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ –¥–æ–ª–µ –µ—ë –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π –≤
            –æ–±—â–µ–π —Å—É–º–º–µ
          </li>
          <li>
            P(–∏–≥—Ä–∞·µ¢) = (—Å—É–º–º–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π –∑–∞ –∏–≥—Ä—É·µ¢) / (–æ–±—â–∞—è —Å—É–º–º–∞
            –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π)
          </li>
          <li>
            –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ
            –≤—ã–±–æ—Ä–∞
          </li>
        </ul>
        <p>
          <strong>–ê–ª–≥–æ—Ä–∏—Ç–º:</strong>
        </p>
        <ol>
          <li>–í—ã—á–∏—Å–ª—è–µ–º –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã</li>
          <li>–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ X ‚àº U[0, 1]</li>
          <li>
            –í—ã–±–∏—Ä–∞–µ–º –∏–≥—Ä—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –∫—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å first –ø—Ä–µ–≤—ã—à–∞–µ—Ç
            X
          </li>
        </ol>
      </div>
    </div>
  );
};

export default FortuneWheel;
